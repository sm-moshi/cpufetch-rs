[package]
name          = "cpufetch-rs"
version       = "0.0.1"
edition       = "2024"
license       = "MIT OR Apache-2.0"
description   = "A blazing-fast, modern, and elegant Rust rewrite of cpufetch!"
readme        = "README.md"
repository    = "https://github.com/sm-moshi/cpufetch-rs"
documentation = "https://docs.rs/cpufetch-rs"
keywords      = ["cpu", "fetch", "cpufetch", "rust", "rs", "cpufetch-rs"]
categories    = ["command-line-utilities", "system-tools"]
exclude       = ["docs/", "target/", ".github/", ".vscode/"]

[[bin]]
name = "cpufetch"
path = "src/main.rs"

# Core dependencies - always required
[dependencies]
# Error handling
thiserror = "2.0.12"                                # CPU module: Custom error type definitions
anyhow    = { version = "1.0.97", optional = true } # CLI module: Error propagation

# CPU information and detection
raw-cpuid = "11.5.0" # CPU module: CPUID instruction access for x86/x86_64
bitflags = { version = "2.9.0", features = [
    "serde",
] } # CPU module: Feature flag representation
num_cpus = "1.16.0" # CPU module: CPU count detection
once_cell = "1.21.3" # CPU module: Lazy statics for singleton CPU info
libc = "1.0.0-alpha.1" # CPU module: C library interface for system calls

# System information (optional, enabled with 'frequency')
sysinfo   = { version = "0.34.2", optional = true } # Frequency module: System information collection
sys-info  = { version = "0.9.0", optional = true }  # Frequency module: Basic system information access
platforms = { version = "3.5.0", optional = true }  # Utility module: Platform detection utilities

# Serialization (optional, enabled with 'json')
serde = { version = "1.0.219", features = [
    "derive",
] } # Core serialization framework
serde_json = { version = "1.0.140", optional = true } # JSON output format
toml = { version = "0.8.20", optional = true } # TOML configuration parsing

# CLI and display (optional, enabled with 'cli' and 'display')
clap = { version = "4.5.35", features = [
    "derive",
], optional = true } # CLI module: Command-line argument parsing
colored = { version = "3.0.0", optional = true } # Display module: Terminal coloring
crossterm = { version = "0.29.0", optional = true } # Display module: Terminal manipulation
textwrap = { version = "0.16.2", optional = true } # Display module: Text wrapping for terminal output
termcolor = { version = "1.4.1", optional = true } # Display module: Terminal coloring capabilities
regex = { version = "1.11.1", optional = true } # Utility module: Regular expression support

# Platform-specific dependencies
[target.'cfg(target_os = "linux")'.dependencies]
procfs = { version = "0.17.0", optional = true } # Linux-specific: proc filesystem access

[target.'cfg(target_os = "windows")'.dependencies]
windows = { version = "0.61.1", features = [
    "Win32_System_SystemInformation",
], optional = true } # Windows-specific: API access
wmi = { version = "0.15.1", optional = true } # Windows-specific: WMI interface
windows-version = { version = "0.1.4", optional = true } # Windows-specific: version detection

[target.'cfg(target_os = "macos")'.dependencies]
sysctl = { version = "0.6.0", optional = true } # macOS-specific: sysctl interface

# Development dependencies - only used for testing
[dev-dependencies]
pretty_assertions = "1.4.1"  # Testing: Better test assertions
assert_cmd        = "2.0.16" # Testing: Command testing
serial_test       = "3.2.0"  # Testing: Test serialization
predicates        = "3.1.3"  # Testing: Assertion predicates
tempfile          = "3.19.1" # Testing: Temporary file handling for tests

[build-dependencies]
cc = "1.2.18" # Build script for optional C compilation

# Feature definitions
[features]
# Base features
default = ["full"]
full    = ["cli", "display", "frequency", "json", "linux", "windows", "macos"]

# Core functional modules
cpu = [] # Always included - CPU detection and feature flags
frequency = [
    "dep:sys-info",
    "dep:sysinfo",
    "dep:platforms",
] # Frequency detection

# Platform-specific features
linux   = ["dep:procfs"]
windows = ["dep:windows", "dep:wmi", "dep:windows-version"]
macos   = ["dep:sysctl"]

# Output and interface features
cli = ["dep:clap", "dep:anyhow"] # Command-line interface
display = [
    "dep:colored",
    "dep:crossterm",
    "dep:textwrap",
    "dep:termcolor",
    "dep:regex",
] # Terminal display and formatting
json = ["dep:serde_json"] # JSON output support
config = ["dep:toml"] # Configuration file support

# Metadata for cargo-udeps to explicitly ignore certain dependencies
[package.metadata.cargo-udeps]
ignore = []
